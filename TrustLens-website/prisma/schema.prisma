generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model Product {
  id        Int     @id @default(autoincrement())
  title     String
  sellerId  String 
  seller    Seller  @relation(fields: [sellerId], references: [id])
}
model Seller {
  id                  String        @id @default(uuid())
  name                String
  email               String        @unique
  password_hash       String
  createdAt           DateTime      @default(now())
  trustScore          Float?
  authenticationValue String?
  graphData           String?
  updatedAt           DateTime      @updatedAt
  phone               String?
  address             String?
  profileImage        String?
  clerkUserId         String        @unique
  products            Product[]
  customers           Customer[]
  reviews             Review[]
  transactions        Transaction[]
}

model Customer {
  id            String        @id @default(uuid())
  sellerId      String
  name          String
  email         String        @unique
  createdAt     DateTime      @default(now())
  phone         String?
  address       String?
  profileImage  String?
  
  // DELETE THE OLD `metaMasked` FIELD IF IT'S STILL THERE.
  // ADD THIS LINE:
  walletAddress String?       // This is the correct field name.

  avgTrustScore BigInt?
  seller        Seller        @relation(fields: [sellerId], references: [id])
  reviews       Review[]
  transactions  Transaction[]
}

model Review {
  id         String   @id @default(uuid())
  sellerId   String
  customerId String
  rating     Int?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String?
  response   String?
  
  // --- CHANGE 2 (NECESSARY): Added fields for TrustLens integration ---
  // The wallet address of the user who wrote the review. This is essential for creating the on-chain attestation.
  userAddress String?
  
  // A flag to track if this review has been successfully attested on the blockchain.
  // Defaults to 'false' to ensure we only try to attest once.
  isAttested  Boolean  @default(false)

  customer   Customer @relation(fields: [customerId], references: [id])
  seller     Seller   @relation(fields: [sellerId], references: [id])
}

model Transaction {
  transactionID    String    @id @default(uuid())
  sellerId         String
  customerId       String
  transactionAmt   Float
  productCD        String?
  card_id          BigInt?
  issuer_bank_code Float?
  card_network     String?
  card_bin         Int?
  card_type        String?
  addr1            BigInt?
  dist1            Float?
  dist2            Float?
  status           String?
  deviceType       String?
  deviceInfo       String?
  operating_system String?
  browser_type     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  paymentMethod    String?
  reference        String?
  isFraud          Boolean?
  P_emaildomain    String?
  R_emaildomain    String?
  addr2            BigInt?
  Transaction_Date DateTime? @map("Transaction Date") @db.Date
  Transaction_Time DateTime? @map("Transaction Time") @db.Time(6)
  trustScore       BigInt?
  customer         Customer  @relation(fields: [customerId], references: [id])
  seller           Seller    @relation(fields: [sellerId], references: [id])
}